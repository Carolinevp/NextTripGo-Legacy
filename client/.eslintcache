[{"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/App.tsx":"1","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/index.tsx":"2","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/reportWebVitals.ts":"3","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/ApolloProvider.js":"4","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/config.js":"5","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/googlemaps/searchlocationinput/SearchLocationInput.js":"6","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/randomvideo/randomvideo.tsx":"7","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/components/sidebar/sidebar.tsx":"8","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/context/auth.tsx":"9","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/register/register.tsx":"10","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/login/login.tsx":"11","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/trips/createtrip/createtrip.tsx":"12","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/trips/displaytrips/displaytrips.tsx":"13","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/util/privateroute/privateroute.tsx":"14","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/util/authroute/authroute.tsx":"15","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/home/home.tsx":"16","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/getphoto/getphoto.tsx":"17","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/components/daterangepicker/daterangepicker.tsx":"18","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/randomvideo/mockdata.js":"19","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/getphoto/mockdata.js":"20","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/profile/profile.tsx":"21"},{"size":1515,"mtime":1609547331163,"results":"22","hashOfConfig":"23"},{"size":631,"mtime":1609356317707,"results":"24","hashOfConfig":"23"},{"size":425,"mtime":1609197035792,"results":"25","hashOfConfig":"23"},{"size":782,"mtime":1609559330590,"results":"26","hashOfConfig":"23"},{"size":150,"mtime":1609703616815,"results":"27","hashOfConfig":"23"},{"size":1842,"mtime":1609677463946,"results":"28","hashOfConfig":"23"},{"size":1126,"mtime":1609679366198,"results":"29","hashOfConfig":"23"},{"size":2078,"mtime":1609677621204,"results":"30","hashOfConfig":"23"},{"size":1606,"mtime":1609525510567,"results":"31","hashOfConfig":"23"},{"size":8331,"mtime":1609557706525,"results":"32","hashOfConfig":"23"},{"size":4876,"mtime":1609618694223,"results":"33","hashOfConfig":"23"},{"size":5204,"mtime":1609763587730,"results":"34","hashOfConfig":"23"},{"size":510,"mtime":1609549060218,"results":"35","hashOfConfig":"23"},{"size":879,"mtime":1609547720593,"results":"36","hashOfConfig":"23"},{"size":393,"mtime":1609527697266,"results":"37","hashOfConfig":"23"},{"size":859,"mtime":1609461499422,"results":"38","hashOfConfig":"23"},{"size":1975,"mtime":1609705674566,"results":"39","hashOfConfig":"23"},{"size":768,"mtime":1609672252854,"results":"40","hashOfConfig":"23"},{"size":153852,"mtime":1609679100946,"results":"41","hashOfConfig":"23"},{"size":21660,"mtime":1609682035090,"results":"42","hashOfConfig":"23"},{"size":98,"mtime":1609380247724,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1w4zcxt",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/App.tsx",["95"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/index.tsx",[],["96","97"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/reportWebVitals.ts",[],["98","99"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/ApolloProvider.js",[],["100","101"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/config.js",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/googlemaps/searchlocationinput/SearchLocationInput.js",["102"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/randomvideo/randomvideo.tsx",["103"],"import React, { useState, useEffect } from 'react';\n// TODO import axios from 'axios';\n\nimport '../pexels.css';\nimport { PexelKey } from '../../../config';\n\n//  delete mock data\nconst data = require('./mockdata');\n\nfunction RandomVideo() {\n  const [videos, setVideos]: any[] = useState([]);\n\n  const getVideos = async () => {\n    try {\n      console.log(data);\n\n      //  use\n      // const data = await axios.get(\n      //   'https://api.pexels.com/videos/search?query=travel&size=small&per_page=30',\n      //   {\n      //     headers: {\n      //       Authorization: `${PexelKey}`,\n      //     },\n      //   }\n      // );\n      // setVideos(data.data.videos);\n      setVideos(data.videos);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  function getRandomInt() {\n    return Math.floor(Math.random() * Math.floor(29));\n  }\n\n  useEffect(() => {\n    getVideos();\n  }, []);\n\n  return (\n    <div>\n      {videos.length && (\n        <video\n          src={videos[getRandomInt()].video_files[0].link}\n          autoPlay\n          loop\n          muted\n        ></video>\n      )}\n    </div>\n  );\n}\n\nexport default RandomVideo;\n","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/components/sidebar/sidebar.tsx",["104","105"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/context/auth.tsx",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/register/register.tsx",["106"],"import React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, Link } from 'react-router-dom';\nimport gql from 'graphql-tag';\n\nimport './register.css';\n\nimport SearchLocationInput from '../../APIs/googlemaps/searchlocationinput/SearchLocationInput';\nimport { useForm } from '../../util/hooks';\nimport { AuthContext } from '../../context/auth';\n\nfunction Register(props: any) {\n  let history = useHistory();\n  const [errors, setErrors]: any = useState({});\n  const [formattedAddress, setFormatedAddress]: any = useState('');\n\n  const context = useContext(AuthContext);\n\n  const { onChange, onSubmit, values }: any = useForm(registerUser, {\n    firstname: '',\n    lastname: '',\n    username: '',\n    currentCity: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(proxy, { data: { register: userData } }) {\n      context.login(userData);\n      history.push('/');\n    },\n    onError(err) {\n      setErrors(err?.graphQLErrors[0]?.extensions?.exception.errors);\n      console.log(err?.graphQLErrors);\n    },\n    variables: {\n      firstname: values.firstname,\n      lastname: values.lastname,\n      username: values.username,\n      currentCity: formattedAddress,\n      email: values.email,\n      password: values.password,\n      confirmPassword: values.confirmPassword,\n    },\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"videos pageNoMargin\">\n      <div className=\"container pageNoMargin\">\n        <div className=\"card o-hidden border-0 shadow-lg my-5\">\n          <div className=\"card-body p-0\">\n            <div className=\"row\">\n              <div className=\"col-lg-5 d-none d-lg-block bg-register-image\"></div>\n              <div className=\"col-lg-7\">\n                <div className=\"p-5\">\n                  <div className=\"text-center\">\n                    <h1 className=\"h4 text-gray-900 mb-4\">\n                      Create an Account!\n                    </h1>\n                  </div>\n                  <form className=\"user\" onSubmit={onSubmit} noValidate>\n                    <div className=\"form-group row\">\n                      <div className=\"col-sm-6 mb-3 mb-sm-0\">\n                        <input\n                          type=\"text\"\n                          className={\n                            errors.firstname\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                          placeholder=\"First Name\"\n                          name=\"firstname\"\n                          value={values.firstname}\n                          onChange={onChange}\n                        />\n                      </div>\n\n                      <div className=\"col-sm-6\">\n                        <input\n                          type=\"text\"\n                          className={\n                            errors.lastname\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                          placeholder=\"Last Name\"\n                          name=\"lastname\"\n                          value={values.lastname}\n                          onChange={onChange}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-group row\">\n                      <div className=\"col-sm-6 mb-3 mb-sm-0\">\n                        <input\n                          type=\"text\"\n                          className={\n                            errors.username\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                          placeholder=\"Username\"\n                          name=\"username\"\n                          value={values.username}\n                          onChange={onChange}\n                        />\n                      </div>\n                      <div className=\"col-sm-6\">\n                        <SearchLocationInput\n                          setFormatedAddress={setFormatedAddress}\n                          placeholder={'Current city'}\n                          styles={\n                            errors.username\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-group\">\n                      <input\n                        type=\"email\"\n                        className={\n                          errors.email\n                            ? 'form-control form-control-user errorRed'\n                            : 'form-control form-control-user'\n                        }\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        value={values.email}\n                        onChange={onChange}\n                      />\n                    </div>\n                    <div className=\"form-group row\">\n                      <div className=\"col-sm-6 mb-3 mb-sm-0\">\n                        <input\n                          type=\"password\"\n                          className={\n                            errors.password\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                          placeholder=\"Password\"\n                          name=\"password\"\n                          value={values.password}\n                          onChange={onChange}\n                        />\n                      </div>\n                      <div className=\"col-sm-6\">\n                        <input\n                          type=\"password\"\n                          className={\n                            errors.confirmPassword\n                              ? 'form-control form-control-user errorRed'\n                              : 'form-control form-control-user'\n                          }\n                          placeholder=\"Confirm Password\"\n                          name=\"confirmPassword\"\n                          value={values.confirmPassword}\n                          onChange={onChange}\n                        />\n                      </div>\n                    </div>\n                    {Object.keys(errors).length > 0 && (\n                      <div>\n                        <ul>\n                          {Object.values(errors).map((value, i) => (\n                            <li key={i}> {value}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-primary btn-user btn-block\"\n                      onClick={onSubmit}\n                    >\n                      Create ↪\n                    </button>\n                  </form>\n                  <hr />\n                  <Link to=\"/login\">\n                    <div className=\"text-center\">\n                      <a className=\"small\" href=\"register.html\">\n                        Already have an account? Login!\n                      </a>\n                    </div>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $firstname: String!\n    $lastname: String!\n    $username: String!\n    $currentCity: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        firstname: $firstname\n        lastname: $lastname\n        username: $username\n        currentCity: $currentCity\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      firstname\n      lastname\n      currentCity\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/login/login.tsx",["107"],"import React, { useContext, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useHistory, Link } from 'react-router-dom';\n\nimport './login.css';\n\nimport { AuthContext } from '../../context/auth';\nimport { useForm } from '../../util/hooks';\n\nfunction Login() {\n  let history = useHistory();\n  const context = useContext(AuthContext);\n\n  const [errors, setErrors]: any = useState({});\n\n  const { onChange, onSubmit, values }: any = useForm(loginUserCallback, {\n    username: '',\n    password: '',\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(proxy, { data: { login: userData } }) {\n      context.login(userData);\n      history.push('/');\n    },\n    onError(err) {\n      setErrors(err?.graphQLErrors[0]?.extensions?.exception.errors);\n    },\n    variables: {\n      username: values.username,\n      password: values.password,\n    },\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"videos pageNoMargin\">\n      <div className=\"container pageNoMargin\">\n        <div className=\"card o-hidden border-0 shadow-lg my-5\">\n          <div className=\"card-body p-0\">\n            <div className=\"row\">\n              <div className=\"col-lg-5 d-none d-lg-block bg-login-image\"></div>\n              <div className=\"col-lg-7\">\n                <div className=\"p-5\">\n                  <div className=\"text-center\">\n                    <h1 className=\"h4 text-gray-900 mb-4\">Welcome back!</h1>\n                  </div>\n                  <form className=\"user\" onSubmit={onSubmit} noValidate>\n                    <div className=\"form-group\">\n                      <input\n                        type=\"text\"\n                        className={\n                          errors.username\n                            ? 'form-control form-control-user errorRed'\n                            : 'form-control form-control-user'\n                        }\n                        placeholder=\"Username\"\n                        name=\"username\"\n                        value={values.username}\n                        onChange={onChange}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <input\n                        type=\"password\"\n                        className={\n                          errors.password\n                            ? 'form-control form-control-user errorRed'\n                            : 'form-control form-control-user'\n                        }\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={values.password}\n                        onChange={onChange}\n                      />\n                    </div>\n                    {Object.keys(errors).length > 0 && (\n                      <div className=\"\">\n                        <ul className=\"\">\n                          {Object.values(errors).map((value, i) => (\n                            <li key={i}> {value}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-primary btn-user btn-block\"\n                      onClick={onSubmit}\n                    >\n                      Login ↪\n                    </button>\n                  </form>\n                  <hr />\n                  <Link to=\"/register\">\n                    <div className=\"text-center\">\n                      <a className=\"small\" href=\"register.html\">\n                        Create an Account!\n                      </a>\n                    </div>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      firstname\n      lastname\n      currentCity\n      profilePic\n      friends {\n        id\n        firstname\n        lastname\n        currentCity\n        trips {\n          id\n          destination\n          picture\n          fromDate\n          toDate\n          createdAt\n          userid {\n            username\n          }\n          expenses\n          toDo\n          friends {\n            username\n            profilePic\n          }\n        }\n        email\n        username\n        createdAt\n      }\n      trips {\n        id\n        destination\n        picture\n        fromDate\n        toDate\n        createdAt\n        userid {\n          username\n        }\n        expenses\n        toDo\n        friends {\n          username\n          profilePic\n        }\n      }\n      email\n      token\n      username\n      createdAt\n    }\n  }\n`;\n\nexport default Login;\n","/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/trips/createtrip/createtrip.tsx",["108","109","110","111","112","113","114","115"],"import React, { useContext, useState, useMemo } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useHistory, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nimport { PexelKey } from '../../../config';\n\nimport SearchLocationInput from '../../../APIs/googlemaps/searchlocationinput/SearchLocationInput';\nimport { AuthContext } from '../../../context/auth';\nimport { useForm } from '../../../util/hooks';\nimport DestinationPhotos from '../../../APIs/pexels/getphoto/getphoto';\nimport Daterangepicker from '../../../components/daterangepicker/daterangepicker';\n\nfunction CreateTrip() {\n  let history = useHistory();\n  const context = useContext(AuthContext);\n  const [errors, setErrors]: any = useState({});\n  const [formattedAddress, setFormatedAddress]: any = useState('');\n  const [photo, setPhoto]: any = useState('');\n  const [dates, setDates]: any = useState({\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'selection',\n  });\n  const [ranges, setRanges]: any = useState({\n    startDate: new Date(),\n    endDate: new Date(),\n  });\n\n  const { onChange, onSubmit, values }: any = useForm(createTripCallback, {\n    // destination: '',\n    picture: '',\n    expenses: '',\n    toDo: '',\n    friends: '',\n  });\n\n  const [createTrip, { loading }] = useMutation(CREATE_TRIP, {\n    update(proxy, { data: { tripId } }) {\n      // const data = proxy.readQuery({\n      //   query: FETCH_POSTS_QUERY\n      // });\n      // data.getPosts = [result.data.createPost, ...data.getPosts];\n      // proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      history.push(`/${tripId}`);\n    },\n    onError(err) {\n      setErrors(err?.graphQLErrors[0]?.extensions?.exception.errors);\n    },\n    variables: {\n      destination: formattedAddress,\n      fromDate: ranges?.startDate,\n      toDate: ranges?.endDate,\n      picture: photo,\n      // expenses: values.expenses,\n      // toDo: values.toDo,\n      // friends: values.friends,\n    },\n  });\n\n  function createTripCallback() {\n    createTrip();\n  }\n\n  return (\n    // <div className=\"card o-hidden border-0 shadow-lg my-5\">\n    <div className=\"card-body p-0\">\n      <div className=\"row\">\n        <div className=\"col-lg-7\">\n          <div className=\"p-5\">\n            <div className=\"text-center\">\n              <h1 className=\"h4 text-gray-900 mb-4\">\n                Ready for your next trip?\n              </h1>\n            </div>\n            <form className=\"user\" onSubmit={onSubmit} noValidate>\n              <div className=\"form-group\">\n                <SearchLocationInput\n                  setFormatedAddress={setFormatedAddress}\n                  placeholder={\"What's your next destination? ✈\"}\n                  styles={\n                    errors.destination\n                      ? 'form-control form-control-user errorRed'\n                      : 'form-control form-control-user'\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <Daterangepicker\n                  setDates={setDates}\n                  dates={dates}\n                  setRanges={setRanges}\n                />\n              </div>\n              <div className=\"form-group\">\n                <DestinationPhotos\n                  // TODO change destination value to to formattedAddress\n                  destination={formattedAddress.split(',')[0]}\n                  setPhoto={setPhoto}\n                />\n              </div>\n              {Object.keys(errors).length > 0 && (\n                <div className=\"\">\n                  <ul className=\"\">\n                    {Object.values(errors).map((value, i) => (\n                      <li key={i}> {value}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary btn-user btn-block\"\n                onClick={onSubmit}\n              >\n                Login ↪\n              </button>\n            </form>\n            <hr />\n          </div>\n        </div>\n      </div>\n    </div>\n    // </div>\n  );\n}\n\nconst CREATE_TRIP = gql`\n  mutation createTrip(\n    $destination: String!\n    $picture: String\n    $fromDate: String!\n    $toDate: String!\n    $expenses: String\n    $toDo: String\n    $friends: String\n  ) {\n    createTrip(\n      createTripInput: {\n        destination: $destination\n        picture: $picture\n        fromDate: $fromDate\n        toDate: $toDate\n        expenses: $expenses\n        toDo: $toDo\n        friends: $friends\n      }\n    ) {\n      id\n      destination\n      picture\n      fromDate\n      toDate\n      expenses\n      toDo\n      userid {\n        id\n      }\n      friends {\n        id\n        firstname\n        lastname\n        currentCity\n        trips {\n          id\n          destination\n          picture\n          fromDate\n          toDate\n          createdAt\n          userid {\n            id\n          }\n          expenses\n          toDo\n          friends {\n            username\n            profilePic\n          }\n        }\n        email\n        username\n        createdAt\n      }\n      createdAt\n    }\n  }\n`;\n\nexport default CreateTrip;\n",["116","117"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/trips/displaytrips/displaytrips.tsx",["118"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/util/privateroute/privateroute.tsx",[],["119","120"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/util/authroute/authroute.tsx",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/home/home.tsx",["121","122","123","124","125","126"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/getphoto/getphoto.tsx",["127"],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/components/daterangepicker/daterangepicker.tsx",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/randomvideo/mockdata.js",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/APIs/pexels/getphoto/mockdata.js",[],"/Users/davidsolsona/Documents/GitHub/Solo/Code/client/src/pages/profile/profile.tsx",[],{"ruleId":"128","severity":1,"message":"129","line":2,"column":43,"nodeType":"130","messageId":"131","endLine":2,"endColumn":48},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"132","replacedBy":"138"},{"ruleId":"134","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":54,"column":6,"nodeType":"142","endLine":54,"endColumn":8,"suggestions":"143"},{"ruleId":"128","severity":1,"message":"144","line":5,"column":10,"nodeType":"130","messageId":"131","endLine":5,"endColumn":18},{"ruleId":"128","severity":1,"message":"145","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":28},{"ruleId":"128","severity":1,"message":"146","line":7,"column":27,"nodeType":"130","messageId":"131","endLine":7,"endColumn":33},{"ruleId":"128","severity":1,"message":"147","line":29,"column":21,"nodeType":"130","messageId":"131","endLine":29,"endColumn":28},{"ruleId":"128","severity":1,"message":"147","line":22,"column":23,"nodeType":"130","messageId":"131","endLine":22,"endColumn":30},{"ruleId":"128","severity":1,"message":"148","line":1,"column":39,"nodeType":"130","messageId":"131","endLine":1,"endColumn":46},{"ruleId":"128","severity":1,"message":"149","line":4,"column":22,"nodeType":"130","messageId":"131","endLine":4,"endColumn":26},{"ruleId":"128","severity":1,"message":"150","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":13},{"ruleId":"128","severity":1,"message":"144","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":18},{"ruleId":"128","severity":1,"message":"151","line":17,"column":9,"nodeType":"130","messageId":"131","endLine":17,"endColumn":16},{"ruleId":"128","severity":1,"message":"152","line":31,"column":11,"nodeType":"130","messageId":"131","endLine":31,"endColumn":19},{"ruleId":"128","severity":1,"message":"153","line":31,"column":31,"nodeType":"130","messageId":"131","endLine":31,"endColumn":37},{"ruleId":"128","severity":1,"message":"147","line":39,"column":24,"nodeType":"130","messageId":"131","endLine":39,"endColumn":31},{"ruleId":"132","replacedBy":"138"},{"ruleId":"134","replacedBy":"139"},{"ruleId":"128","severity":1,"message":"146","line":2,"column":27,"nodeType":"130","messageId":"131","endLine":2,"endColumn":33},{"ruleId":"132","replacedBy":"154"},{"ruleId":"134","replacedBy":"155"},{"ruleId":"128","severity":1,"message":"156","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"157","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"158","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":18},{"ruleId":"128","severity":1,"message":"159","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":11},{"ruleId":"128","severity":1,"message":"160","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":27},{"ruleId":"128","severity":1,"message":"161","line":6,"column":10,"nodeType":"130","messageId":"131","endLine":6,"endColumn":25},{"ruleId":"128","severity":1,"message":"162","line":9,"column":7,"nodeType":"130","messageId":"131","endLine":9,"endColumn":15},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],["163"],["164"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setFormatedAddress'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'PexelKey' is defined but never used.","'PeopleAltRoundedIcon' is defined but never used.","'Router' is defined but never used.","'loading' is assigned a value but never used.","'useMemo' is defined but never used.","'Link' is defined but never used.","'axios' is defined but never used.","'context' is assigned a value but never used.","'onChange' is assigned a value but never used.","'values' is assigned a value but never used.",["163"],["164"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'useQuery' is defined but never used.","'gql' is defined but never used.","'SearchLocationInput' is defined but never used.","'TripOriginSharp' is defined but never used.","'mockdata' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: [setFormatedAddress]",{"range":"168","text":"169"},[1602,1604],"[setFormatedAddress]"]